.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ZMQ::Constants 3pm"
.TH ZMQ::Constants 3pm "2014-01-14" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ZMQ::Constants \- Constants for libzmq
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use ZMQ::Constants \*(Aq:all\*(Aq; # pulls in all constants for all versions
\&    use ZMQ::Constants \*(Aq:v3.1.1\*(Aq, \*(Aq:all\*(Aq; # pulls in constants for 3.1.1
\&    use ZMQ::Constants \*(Aq:v3.1.2\*(Aq, \*(Aq:all\*(Aq; # pulls in constants for 3.1.2
\&
\&    # If you know what you\*(Aqre doing, this is the best way:
\&    # (i.e., explicitly import the symbols)
\&    use ZMQ::Constants qw(ZMQ_REQ);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
libzmq is a fast-chanding beast and constants get renamed, new one gest
removed, etc...
.PP
We used to auto-generate constants from the libzmq source code, but then
adpating the binding code to this change got very tedious, and controling
which version contains which constants got very hard to manage.
.PP
This module is now separate from \s-1ZMQ\s0 main code, and lists the constants
statically. You can also specify which set of constants to pull in depending
on the zmq version.
.PP
If don't care to be strict about which constants to import into your code, then don't bother with the ':vX.X.X' notation, just use like a normal module:
.PP
.Vb 3
\&    use ZMQ::Constants qw(:all);     # pulls all known constants...
\&                                     # note: may contain extra constants
\&                                     # if we have clashes in the future
\&    
\&    use ZMQ::Constants qw(ZMQ_PUSH); # import just ZMQ_PUSH
.Ve
.SH "SUPPORTED VERSIONS"
.IX Header "SUPPORTED VERSIONS"
I have checked that the constants for the following versions are available.
.PP
Note that for regular usage, you should just explicitly import what you need.
The following exist to basically allow me to create a sane catalog of what's
available in what version. I reiterate: \s-1IN MOST CASES YOU SHOULD JUST IMPORT\s0 
\&\s-1WHAT YOU NEED:\s0
.PP
.Vb 1
\&    use ZMQ::Constants qw(ZMQ_REP ZMQ_REQ); # etc
.Ve
.PP
Please send pullreqs if there are new constants that are not defined.
.IP "libzmq 2.1.11" 4
.IX Item "libzmq 2.1.11"
.PD 0
.IP "libzmq 3.1.1" 4
.IX Item "libzmq 3.1.1"
.PD
No \s-1ZMQ\s0 device related stuff
.IP "libzmq 3.1.2" 4
.IX Item "libzmq 3.1.2"
\&\s-1NOTE:\s0 This is libzmq/master branch as of this writing. new constants may have been added.
.Sp
Reintroduces \s-1ZMQ\s0 device related constants, and adds \s-1ZMQ_FAIL_UNROUTABLE\s0
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
These functions are usually for internal use only. You should not need to
use them if you're just a \s-1ZMQ\s0.pm user
.SS "register_set"
.IX Subsection "register_set"
Creates a new \*(L"set\*(R" of constants for a particular version.
.SS "get_sockopt_type"
.IX Subsection "get_sockopt_type"
Gets the type for the given libzmq socket option. This is used when
ZMQ::getsockopt is called to determine the underlying socket option type
.SS "set_sockopt_type"
.IX Subsection "set_sockopt_type"
Sets the type for the given libzmq socket option.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ZMQ::LibZMQ2, ZMQ::LibZMQ3, \s-1ZMQ::CZMQ\s0, \s-1ZMQ\s0
.PP
<http://zeromq.org>
.PP
<http://github.com/lestrrat/p5\-ZMQ>
.SH "AUTHOR"
.IX Header "AUTHOR"
Daisuke Maki \f(CW\*(C`<daisuke@endeworks.jp>\*(C'\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
The ZeroMQ module is
.PP
Copyright (C) 2010 by Daisuke Maki
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.0 or,
at your option, any later version of Perl 5 you may have available.
