.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Libssh::Session 3pm"
.TH Libssh::Session 3pm "2021-09-12" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Libssh::Session \- Support for the SSH protocol via libssh.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  !/usr/bin/perl
\&
\&  use strict;
\&  use warnings;
\&  use Libssh::Session qw(:all);
\&
\&  my $session = Libssh::Session\->new();
\&  if (!$session\->options(host => "127.0.0.1", port => 22)) {
\&    print $session\->error() . "\en";
\&    exit(1);
\&  }
\&
\&  if ($session\->connect() != SSH_OK) {
\&    print $session\->error() . "\en";
\&    exit(1);
\&  }
\&  
\&  if ($session\->auth_password(password => "password") != SSH_AUTH_SUCCESS) {
\&    printf("auth issue: %s\en", $session\->error(GetErrorSession => 1));
\&    exit(1);
\&  }
\&
\&  print "== authentification succeeded\en";
\&  
\&  sub my_callback {
\&    my (%options) = @_;
\&    
\&    print "================================================\en";
\&    print "=== exit = " . $options{exit} . "\en";
\&    if ($options{exit} == SSH_OK || $options{exit} == SSH_AGAIN) { # AGAIN means timeout
\&        print "=== exit_code = " . $options{exit_code} . "\en";
\&        print "=== userdata = " . $options{userdata} . "\en";
\&        print "=== stdout = " . $options{stdout} . "\en";
\&        print "=== stderr = " . $options{stderr} . "\en";
\&    } else {
\&        printf("error: %s\en", $session\->error(GetErrorSession => 1));
\&    }
\&    print "================================================\en";
\&    
\&    #$options{session}\->add_command(command => { cmd => \*(Aqls \-l\*(Aq, callback => \e&my_callback, userdata => \*(Aqcmd 3\*(Aq});
\&  }
\&
\&  $session\->execute(
\&    commands => [ 
\&        { cmd => \*(Aqls \-l\*(Aq, callback => \e&my_callback, userdata => \*(Aqcmd 1\*(Aq},
\&        { cmd => \*(Aqls wanterrormsg\*(Aq, callback => \e&my_callback, userdata => \*(Aqcmd 2 error\*(Aq}
\&    ],
\&    timeout => 60, timeout_nodata => 30, parallel => 4
\&  );
\&  exit(0);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Libssh::Session\*(C'\fR is a perl interface to the libssh (<http://www.libssh.org>)
library. It doesn't support all the library. It's working in progress.
.PP
Right now, you can authenticate and execute commands on a \s-1SSH\s0 server.
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Create new Session object:
.Sp
.Vb 1
\&    my $session = Libssh::Session\->new();
.Ve
.IP "auth_publickey_auto ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_publickey_auto ([ OPTIONS ])"
Tries to automatically authenticate with public key and \*(L"none\*(R". returns \s-1SSH_AUTH_SUCCESS\s0 if it succeeds.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBpassphrase\fR \- passphrase for the private key (if it's needed. Otherwise don't set the option).
.IP "auth_list ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_list ([ OPTIONS ])"
Tries to retrieve a list of accepted authentication methods. Returns a bitfield of the following values:
\&\s-1SSH_AUTH_METHOD_UNKNOWN
SSH_AUTH_METHOD_NONE
SSH_AUTH_METHOD_PASSWORD
SSH_AUTH_METHOD_PUBLICKEY
SSH_AUTH_METHOD_HOSTBASED
SSH_AUTH_METHOD_INTERACTIVE
SSH_AUTH_METHOD_GSSAPI_MIC\s0
.Sp
The function \fBauth_none()\fR must be called first before the methods are available.
.IP "auth_password ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_password ([ OPTIONS ])"
Try to authenticate by password. returns \s-1SSH_AUTH_SUCCESS\s0 if it succeeds.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBpassword\fR \- passphrase for the private key (if it's needed. Otherwise don't set the option).
.IP "auth_kbdint ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint ([ OPTIONS ])"
Try to authenticate through the \*(L"keyboard-interactive\*(R" method. Returns one of the following:
\&\s-1SSH_AUTH_ERROR:\s0   A serious error happened\en
\&\s-1SSH_AUTH_DENIED:\s0  Authentication failed : use another method\en
\&\s-1SSH_AUTH_PARTIAL:\s0 You've been partially authenticated, you still
                  have to use another method\en
\&\s-1SSH_AUTH_SUCCESS:\s0 Authentication success\en
\&\s-1SSH_AUTH_INFO:\s0    The server asked some questions. Use
                  \fBauth_kbdint_getnprmopts()\fR and such to retrieve
                  and answer them.\en
\&\s-1SSH_AUTH_AGAIN:\s0   In nonblocking mode, you've got to call this again
                  later.
.IP "auth_kbdint_getname ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint_getname ([ OPTIONS ])"
Get the \*(L"name\*(R" of the message block. Returns undef if there isn't one or it couldn't be retrieved.
.IP "auth_kbdint_getinstruction ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint_getinstruction ([ OPTIONS ])"
Get the \*(L"instruction\*(R" of the message block. Returns undef if there isn't one or it couldn't be retrieved.
.IP "auth_kbdint_getnprmopts ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint_getnprmopts ([ OPTIONS ])"
Get the number of authentication questions given by the server. This function can be used once you've called \fBauth_kbdint()\fR and the server responded with \s-1SSH_AUTH_INFO.\s0
.IP "auth_kbdint_getprompt ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint_getprompt ([ OPTIONS ])"
Get a prompt from a message block. This function can be used once you've called \fBauth_kbdint()\fR and the server responded with \s-1SSH_AUTH_INFO\s0 to retrieve one of the authentication questions. The total number of quesitons can be retrieved with \fBauth_kbdint_getnprmopts()\fR. Returns a reference to a hash table.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBindex\fR \- The number of the prompt you want to retrieve.
.Sp
The hash table returned has the following attributes:
.Sp
\&\fBtext\fR \- The prompt text.
.Sp
\&\fBecho\fR \- '0' or '1' bool value whether or not the user's input should be echoed back.
.IP "auth_kbdint_setanswer ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_kbdint_setanswer ([ OPTIONS ])"
Set the answer to a prompt from a message block.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBindex\fR \- The number of the prompt you want to give an answer to.
.Sp
\&\fBanswer\fR \- The answer to the question. If reading ipnut from <\s-1STDIN\s0> make sure to \fBchomp()\fR and append a \*(L"\e0\*(R" character, otherwise it doesn't seem to work.
.IP "auth_none ([ \s-1OPTIONS\s0 ])" 4
.IX Item "auth_none ([ OPTIONS ])"
Try to authenticate through the \*(L"none\*(R" method. returns \s-1SSH_AUTH_SUCCESS\s0 if it succeeds.
.IP "connect ([ \s-1OPTIONS\s0 ])" 4
.IX Item "connect ([ OPTIONS ])"
Connect to the ssh server. returns \s-1SSH_OK\s0 if no error.
By default, the connect does the server check verification.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBconnect_only\fR \- Set the value to '1' if you want to do the server check verification yourself.
.Sp
\&\fBSkipKeyProblem\fR \- Returns \s-1SSH_OK\s0 even if there is a problem (server known changed or server found other) with the ssh server (set by default. Set '0' to disable).
.IP "disconnect ()" 4
.IX Item "disconnect ()"
Disconnect from a session. The session can then be reused to open a new session.
.Sp
The method take care of the current open channels.
.Sp
\&\fBWarning\fR: in many case, you should let the destructor do it!
.IP "execute_simple ([ \s-1OPTIONS\s0 ])" 4
.IX Item "execute_simple ([ OPTIONS ])"
Execute a single command. Returns a reference to a hash table.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBcmd\fR \- The command to execute.
.Sp
\&\fBtimeout\fR \- Set the timeout in seconds for the global command execution (By default: 300).
.Sp
\&\fBtimeout_nodata\fR \- Set the timeout in seconds for no data received (By default: 120).
.Sp
The hash table returned has the following attributes:
.Sp
\&\fBexit\fR \- \s-1SSH_ERROR\s0 in case of failure. \s-1SSH_AGAIN\s0 in case of timeout. \s-1SSH_OK\s0 otherwise.
.Sp
\&\fBexit_code\fR \- The exit code of the command executed. undef when timeout.
.Sp
\&\fBstdout\fR \- The stdout of the executed command.
.Sp
\&\fBstderr\fR \- The stderr of the executed command.
.IP "execute ([ \s-1OPTIONS\s0 ])" 4
.IX Item "execute ([ OPTIONS ])"
Execute multiple commands. If an error occured, please look how to handle it with the callback functions.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBcommands\fR \- Reference to an array of hashes.
.Sp
\&\fBtimeout\fR \- Set the timeout in seconds for the global command execution (By default: 300). Each command has its own timeout.
.Sp
\&\fBtimeout_nodata\fR \- Set the timeout in seconds for no data received (By default: 120). Each command has its own timeout.
.Sp
\&\fBparallel\fR \- Set the number of parallel commands launched (By default: 4).
.Sp
\&\fBWarning\fR: Execution times of callbacks count in timeout! Maybe you should save the datas and manages after the execute function.
.Sp
Look the example above to see how to set the array for \fBcommands\fR.
.IP "error ( )" 4
.IX Item "error ( )"
Returns the last error message. returns undef if no error.
.IP "get_publickey_hash ([ \s-1OPTIONS\s0 ])" 4
.IX Item "get_publickey_hash ([ OPTIONS ])"
Get a hash of the public key. If an error occured, undef is returned.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBType\fR \- Hash type to used. Default: \s-1SSH_PUBLICKEY_HASH_SHA1.\s0 Can be: \s-1SSH_PUBLICKEY_HASH_MD5.\s0
.IP "get_server_publickey ( )" 4
.IX Item "get_server_publickey ( )"
Returns the server public key. If an error occured, undef is returned.
.Sp
\&\fBWarning\fR: should be used if you know what are you doing!
.IP "options ([ \s-1OPTIONS\s0 ])" 4
.IX Item "options ([ OPTIONS ])"
Set options for the ssh session. If an error occured, != \s-1SSH_OK\s0 is returned.
.Sp
\&\f(CW\*(C`OPTIONS\*(C'\fR are passed in a hash like fashion, using key and value pairs. Possible options are:
.Sp
\&\fBHost\fR \- The hostname or ip address to connect to.
.Sp
\&\fBUser\fR \- The username for authentication.
.Sp
\&\fBPort\fR \- The port to connect to.
.Sp
\&\fBTimeout\fR \- Set a timeout for the connection in seconds.
.Sp
\&\fBLogVerbosity\fR \- Set the session logging verbosity (can be: \s-1SSH_LOG_NOLOG, SSH_LOG_RARE,...\s0)
.Sp
\&\fBSshDir\fR \- Set the ssh directory. The ssh directory is used for files like known_hosts and identity (private and public key). It may include \*(L"%s\*(R" which will be replaced by the user home directory.
.Sp
\&\fBKnownHosts\fR \- Set the known hosts file name.
.Sp
\&\fBIdentity\fR \- Set the identity file name (By default identity, id_dsa and id_rsa are checked).
.Sp
\&\fBRaiseError\fR \- Die if there is an error (By default: 0).
.Sp
\&\fBPrintError\fR \- print in stdout if there is an error (By default: 0).
.SH "LICENSE"
.IX Header "LICENSE"
This library is licensed under the Apache License 2.0. Details of this license can be found within the '\s-1LICENSE\s0' text file
.SH "AUTHOR"
.IX Header "AUTHOR"
Quentin Garnier <qgarnier@centreon.com>
